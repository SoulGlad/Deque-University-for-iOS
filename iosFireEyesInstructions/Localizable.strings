/* 
  Localizable.strings
  iosFireEyesInstructions

  Created by Chris McMeeking on 6/5/14.
  Copyright (c) 2014 Deque Systems. All rights reserved.
*/

"BLANK" = "";
"CAT" = "cat";
"DOG" = "dog";
"FISH" = "fish";

"SITR" = "Singing in the Rain";
"SSB" = "Star Spangled Banner";
"AG" = "Amazing Grace";
"PLAYS_MUSIC" = "Plays Music";

"MODIFY_IMAGE" = "Modify image display";
"DISPLAY_DOG" = "Display a picture of a dog:";
"DISPLAY_CAT" = "Display a picture of a cat:";
"DISPLAY_FISH" = "Display a picture of a fish:";

"INTRO_ABOUT_APP" = "This app goes through example scenarios you may encounter when programming your own apps, and explains how they are inaccessible as well as what can be done to make them accessible.  Before moving on, it is recommended that you enable VoiceOver, as well as the \"3-click\" VoiceOver on/off shortcut.  The \"Guided Tour\" will take you through a list of accessibility concepts one by one, and the \"Accessibility Contents\" will allow you to pick a specific topic you're struggling with.";

"A11Y_ABOUT_TEXTVIEW" = "When a user interacts with an application, certain aspects of the application are immediately apparent.  Visual clues, other apps you've dealt with in the past, UI conventions all help a user understand what it is an application does.  Accessibility is about portraying this same information, but to users with different capabilities.  The following scenarios aim to help you to understand the difficulties users with dissabilities have when interacting with iOS applications, as well as the techniques and conventions you can use to portray this information using basic iOS APIs.";

//Traits story
"TRAIT_INFO_TEXTVIEW1" = "Traits help identify what a button does.  Each trait has a very specific purpose.  Some traits, such as button/link communicate purpose to VoiceOver users, while others like 'Updates Frequently' communicate information about the behavior of an item to VoiceOver, to ensure that it behaves reasonably.";

"TRAIT_INFO_TEXTVIEW2" = "When a sighted user uses an application, they get hints about what UI Elements do based on their appearance.  Traits help communicate this same information to non-sighted users.";

"TRAIT_EXAMPLE_TEXTVIEW" = "Below is a screen similar to the one in the Labels example, however, notice that one of the buttons looks a little different.  Its appearance would suggest that it is a link.";

"TRAIT_BROKEN_TEXTVIEW" = "Notice the last button appropriately has the trait of a link (because it opens a WebPage), but it also has the trait of a button.  A link is a specialization of a button (an element that expects interaction).  To enable both is redundant, unnecessary, and misleading.";

"TRAIT_FIXED_TEXTVIEW" = "Here we have removed the unnecessary traits to clarify the purpose of the last button.  There are many examples of traits that should not be paired together.";

//Labels Story
"LABEL_INFO_TEXTVIEW1" = "Labels help identify 'What' an object is.  Labels should be short and concise.  If you are tempted to make a label longer than a word or two, it is likely that the information you're adding belongs in the hint.  Labels should start with a capital letter and end with no punctuation.  This helps VoiceOver get the correct inflection.  Labels should not contain information about the type of control.  This information is stored in the trait.";

"LABEL_INFO_TEXTVIEW2" = "Labels provide information to VoiceOver quickly.  Unlike hints, whose readout is delayed.  When designing accessible applications you want to keep two particular users in mind.  The power user, and the new user.  Think of labels as something to help power users.  The person who knows that a row of buttons are links, or that they play music.  They don't need to be reminded that a button is going to visit a WebPage, they just need to know which page they will be visiting.";

"LABEL_EXAMPLE_TEXTVIEW" = "Below is an example where the context of the buttons is obvious.  Clearly each button is going to display a picture.  The labels for each button are the pictures that are to be displayed.";

"LABEL_FIXED_TEXTVIEW" = "Here we have added the relevant accessibility information.  Now, with VoiceOver turned on, you can easily tell which picture is going to be displayed.";

//Nested Story
"NESTED_FIXED_TEXTVIEW" = "By removing the parent view from the list of 'Accessibility Elements' the buttons within become focusable.  A very serious problem, but a very easy fix!";

"NESTED_BROKEN_TEXTVIEW" = "Notice how, when you turn VoiceOver on, a black box shows up around our music player.  You cannot interact with the button elements inside this box!";

"NESTED_EXAMPLE_TEXTVIEW" = "Remember our music player?  In this view we have added a parent view around our entire player.  This is a very reasonable separation of functionality";

"NESTED_INFORMATION_TEXTVIEW1" = "When you mark an element an 'Accessibility Element' you're telling VoiceOver that it is an element that requires user interaction.  You cannot place one such element inside another.  If you do, only the outer element will be focusable using VoiceOver.  Below is a very simple code snippet that would create this issue.";

"NESTED_INFORMATION_TEXTVIEW2" = "For developers, grouping information in views allows you to conceptually group areas of functionality, and create sleak, easily scalable applications for multiple view types.  Just remember not to make your container views 'Accessibility Elements' and you're all set.";

//Hints story
"HINT_INFO_TEXTVIEW1" = "Hints identify what an object does.  They provide additional context to users who are not use to using your application.  Hints should start with a capital letter and contain a verb.  Hints should not contain information about the trait, and should avoid duplicating information in the label.";

"HINT_INFO_TEXTVIEW2" = "Hints provide the information that new users to your application need to help them know what your application does.  Going back to our power users versus new users example, hints help new users.  Ideally as users become accustomed to your application, the information provided in the hint will not be needed.  However, until they've spent enough time using your app, the information contained in the hint is crucial.";

"HINT_EXAMPLE_TEXTVIEW" = "Notice how the visual cues, like the title \"Music Player\" and the style of the \"Play Buttons\" provide context.  Because of these visual cues we already know what these buttons do.";

"HINT_BROKEN_TEXTVIEW" = "Now, without those visual cues, what do these buttons do?  Sure, the accessibility labels of song titles suggest that songs will be played.  But, iOS provides the Hint attribute for us so we can tell users: \"This button plays a song\"";

"HINT_FIXED_TEXTVIEW" = "Now we have added the hint information back onto the buttons.  With these hints, you know that 'Star Spangled Banner' is a song that is going to be played, and not a website that will be visited for further information.";

//---------------------- Font Size Story ----------------------
//Information View
"FONT_SIZE_INFO_HEADING" = "Dynamic Type";

"FONT_SIZE_INFO_SUBHEADING1" = "I can mess up font size?  Really?";

"FONT_SIZE_INFO_PARAGRAPH1" = "Starting in iOS 7 users were given the ability to change their preferred reading font.  This allows users with sight impairments to increase the size of their text past what users might normally find usable.  It also allows any user the ability to shrink or expand text to a size they are comfortable with.";

"FONT_SIZE_INFO_SUBHEADING2" = "Why is it important?";

"FONT_SIZE_INFO_PARAGRAPH2" = "Responding properly to text size change requests is important, though not as critical as other accessibility considerations.  Users with sight impairments still have access to Zoom features.  However, from a usability point of view, the new Dynamic Type features are more convenient and user friendly than the zoom feature.";

//Broken View
"FONT_SIZE_BROKEN_HEADING" = "Dynamic Type Broken";

"FONT_SIZE_BROKEN_SUBHEADING1" = "First way to break it!";

"FONT_SIZE_BROKEN_PARAGRAPH1" = "One way for Dynamic Type sizing to be broken is simply not to enable it.  Notice how, if you change the text size setting, this view does not change!  Dynamic Type is not enabled on UITextViews and UILabels by default.  You must add support for it manually.";

"FONT_SIZE_BROKEN_SUBHEADING2" = "Second way to break it!";

"FONT_SIZE_BROKEN_PARAGRAPH2" = "Another way to break your applications is to set up your TextViews properly, but not allow the rest of your UI to adapt accordingly.  For example, look at the heading at the bottom of this view.  We have set it up with constraints to be some odd pixels lower than our TextView.  Now, enable the largest Dynamic Type size!  Our heading at the bottom of the page gets pushed beneath the navigation bar and disappears!  THIS IS BAD!  ";

//Fixed View
"FONT_SIZE_FIXED_HEADING" = "Dynamic Type Fixed";

"FONT_SIZE_FIXED_SUBHEADING1" = "Fix One";

"FONT_SIZE_FIXED_PARAGRAPH1" = "To fix the first issue, we simply have to set up Dynamic Type Sizing for the UITextView.  We do this by grabbing the correct font from the UIFont class.  Also, by listening for Content Size notifications, you can keep your view in sync with the user configurable content size setting within iOS.  Also, be careful to ensure that your views initialize properly.";

"FONT_SIZE_FIXED_SUBHEADING2" = "Fix Two!";

"FONT_SIZE_FIXED_PARAGRAPH2" = "Finally, in order to keep the heading below from disappearing we need to do one of two things.  Either make our UITextViews scollable, or place everything in a scroll view.  Placing everything in a scroll view is the solution we decided to use in this scene.";
